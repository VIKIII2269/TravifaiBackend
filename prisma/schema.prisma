generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  HOTELIER
  TRAVELER
  TRAVEL_AGENCY
  TAXI_DRIVER
  ADMIN
}

model User {
  email    String @unique
  id       String @id @default(uuid())
  password String
  phone    String @unique
  username String @unique
  role     Role   @default(TRAVELER)

  propertyInfo       PropertyInfo?
  propertyRooms      PropertyRoom[]
  connectivity       Connectivity?
  usp                PropertyUSP?
  amenities          Amenities?
  mandatoryAmenities MandatoryAmenities?
  documents          Document[]
  rules              PropertyRules?
  status             PropertyStatus?
  subscription       Subscription?
}

model PropertyInfo {
  id                      String   @id @default(uuid())
  userId                  String   @unique
  hotelId                 String   @unique
  hotelName               String
  businessOwnerName       String
  designation             String
  contact1Phone           String
  contact1Email           String
  contact1Landline        String?
  contact2Phone           String?
  contact2Email           String?
  contact2Landline        String?
  locationLocality        String
  locationStreet          String
  locationCity            String
  locationState           String
  locationCountry         String
  locationPincode         String
  // locationLatitude        Float?
  // locationLongitude       Float?
  propertyType            String
  propertyRelationship    String
  onLease                 Boolean
  totalRooms              Int
  registerOnOTAs          Boolean
  commissionPercentToOTAs Float?
  uploadIntroVideoUrl     String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  videos       HotelVideo[]
  subscription Subscription? @relation("HotelSubscription")
}

model Subscription {
  id          String   @id @default(uuid())
  userId      String   @unique
  hotelId     String   @unique
  submitted   Boolean  @default(false)
  approved    Boolean  @default(false)
  subscribed  Boolean  @default(false)
  recommended Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User         @relation(fields: [userId], references: [id])
  property PropertyInfo @relation("HotelSubscription", fields: [hotelId], references: [hotelId])
}

model PropertyRoom {
  id                   String   @id @default(uuid())
  userId               String
  roomTypeName         String
  floorNumber          Int
  totalRooms           Int
  roomType             String
  bedType              String
  roomView             String
  smokingAllowed       Boolean
  extraBedAllowed      Boolean
  amenities            String[]
  baseAdult            Int
  maxAdult             Int
  maxChildren          Int
  maxOccupancy         Int
  baseRate             Float
  extraAdultCharge     Float
  childCharge          Float
  availabilityStart    String
  availabilityEnd      String
  totalRoomsInProperty Int
  uploadRoomImageUrls  String[]
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Connectivity {
  id                        String   @id @default(uuid())
  userId                    String   @unique
  channelManagerUsed        Boolean
  connectedWithTravelAgency Boolean
  channelManagerName        String?
  travelAgencyName          String?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model PropertyUSP {
  id                       String   @id @default(uuid())
  userId                   String   @unique
  ageOfProperty            Int
  historicalEventAvailable Boolean
  historicalEventDesc      String?
  propertyOwnerDescription String
  nearbyPlaces             String[]
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Amenities {
  id                String   @id @default(uuid())
  userId            String   @unique
  mandatory         String[]
  basicFacilities   String[]
  generalServices   String[]
  outdoorActivities String[]
  commonAreas       String[]
  foodAndDrink      String[]
  healthWellness    String[]
  businessCenter    String[]
  beautyAndSpa      String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model MandatoryAmenities {
  id              String   @id @default(uuid())
  userId          String   @unique
  airConditioning Boolean
  laundry         Boolean
  newspaper       Boolean
  parking         Boolean
  roomService     Boolean
  smokeDetector   Boolean
  smokingRooms    Boolean
  swimmingPools   Boolean
  wifi            Boolean
  lounge          Boolean
  reception       Boolean
  bar             Boolean
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Document {
  id        String   @id @default(uuid())
  userId    String
  category  String
  fileUrl   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model PropertyRules {
  id           String   @id @default(uuid())
  userId       String   @unique
  coupleRule   String
  guestRule    String
  otherRule    String
  petRule      String
  checkInTime  String
  checkOutTime String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model PropertyStatus {
  id        String   @id @default(uuid())
  userId    String   @unique
  status    String   @default("draft") // "draft" | "submitted" | "approved"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model HotelVideo {
  id         String   @id @default(uuid())
  propertyId String
  videoUrl   String
  createdAt  DateTime @default(now())

  property PropertyInfo @relation(fields: [propertyId], references: [id])
}
